// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "task_manger_clean_architecture/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: c, user_id
func (_m *UserUseCase) GetUser(c context.Context, user_id string) (domain.User, error) {
	ret := _m.Called(c, user_id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(c, user_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(c, user_id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: c, email
func (_m *UserUseCase) GetUserByEmail(c context.Context, email string) (domain.User, error) {
	ret := _m.Called(c, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(c, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(c, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: c, startIndex, recordsPerPage
func (_m *UserUseCase) GetUsers(c context.Context, startIndex int64, recordsPerPage int64) ([]*domain.User, error) {
	ret := _m.Called(c, startIndex, recordsPerPage)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []*domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]*domain.User, error)); ok {
		return rf(c, startIndex, recordsPerPage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []*domain.User); ok {
		r0 = rf(c, startIndex, recordsPerPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(c, startIndex, recordsPerPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: c, email
func (_m *UserUseCase) Login(c context.Context, email string) (*domain.User, error) {
	ret := _m.Called(c, email)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(c, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(c, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Promote provides a mock function with given fields: c, user_id, userType
func (_m *UserUseCase) Promote(c context.Context, user_id string, userType string) (error, int64, int64) {
	ret := _m.Called(c, user_id, userType)

	if len(ret) == 0 {
		panic("no return value specified for Promote")
	}

	var r0 error
	var r1 int64
	var r2 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (error, int64, int64)); ok {
		return rf(c, user_id, userType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(c, user_id, userType)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) int64); ok {
		r1 = rf(c, user_id, userType)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) int64); ok {
		r2 = rf(c, user_id, userType)
	} else {
		r2 = ret.Get(2).(int64)
	}

	return r0, r1, r2
}

// Signup provides a mock function with given fields: c, user
func (_m *UserUseCase) Signup(c context.Context, user domain.User) (interface{}, error) {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) (interface{}, error)); ok {
		return rf(c, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) interface{}); ok {
		r0 = rf(c, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User) error); ok {
		r1 = rf(c, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAllTokens provides a mock function with given fields: token, refreshToken, user_id
func (_m *UserUseCase) UpdateAllTokens(token string, refreshToken string, user_id string) error {
	ret := _m.Called(token, refreshToken, user_id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAllTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(token, refreshToken, user_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
