// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "task_manger_clean_architecture/domain"

	mock "github.com/stretchr/testify/mock"
)

// TaskUsecase is an autogenerated mock type for the TaskUsecase type
type TaskUsecase struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: c, newTask
func (_m *TaskUsecase) AddTask(c context.Context, newTask domain.Task) error {
	ret := _m.Called(c, newTask)

	if len(ret) == 0 {
		panic("no return value specified for AddTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) error); ok {
		r0 = rf(c, newTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteById provides a mock function with given fields: c, id
func (_m *TaskUsecase) DeleteById(c context.Context, id string) (int64, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields: c
func (_m *TaskUsecase) GetTasks(c context.Context) ([]*domain.Task, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []*domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Task, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Task); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasksById provides a mock function with given fields: c, id
func (_m *TaskUsecase) GetTasksById(c context.Context, id string) (*domain.Task, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksById")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Task, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Task); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: c, id, updatedTask
func (_m *TaskUsecase) UpdateTask(c context.Context, id string, updatedTask domain.Task) error {
	ret := _m.Called(c, id, updatedTask)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Task) error); ok {
		r0 = rf(c, id, updatedTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskUsecase creates a new instance of TaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUsecase {
	mock := &TaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
